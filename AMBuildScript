# vim: set sts=2 ts=8 sw=2 tw=99 et ft=python:
import os, sys
import traceback

class SDK(object):
  def __init__(self, sdk, ext, aDef, name, platform, dir):
    self.folder = 'hl2sdk-' + dir
    self.envvar = sdk
    self.ext = ext
    self.code = aDef
    self.define = name
    self.platform = platform
    self.name = dir
    self.path = None # Actual path
    self.platformSpec = platform

    # By default, nothing supports x64.
    if type(platform) is list:
      self.platformSpec = {p: ['x86'] for p in platform}
    else:
      self.platformSpec = platform

  def shouldBuild(self, targets):
    for cxx in targets:
      if cxx.target.platform in self.platformSpec:
        if cxx.target.arch in self.platformSpec[cxx.target.platform]:
          return True
    return False

WinOnly = ['windows']
WinLinux = ['windows', 'linux']
WinLinuxMac = ['windows', 'linux', 'mac']

def ResolveEnvPath(env, folder):
  if env in os.environ:
    path = os.environ[env]
    if os.path.isdir(path):
      return path
    return None

  head = os.getcwd()
  oldhead = None
  while head != None and head != oldhead:
    path = os.path.join(head, folder)
    if os.path.isdir(path):
      return path
    oldhead = head
    head, tail = os.path.split(head)

  return None

def Normalize(path):
  return os.path.abspath(os.path.normpath(path))
  
def SetArchFlags(compiler):
  if compiler.behavior == 'gcc':
    if compiler.target.arch == 'x86_64':
      compiler.cflags += ['-fPIC']
  elif compiler.like('msvc'):
    if compiler.target.arch == 'x86_64':
      compiler.defines += ['WIN64']

class ExtensionConfig(object):
  def __init__(self):
    self.sdks = {}
    self.binaries = []
    self.spvm = []
    self.extensions = []
    self.generated_headers = None
    self.sm_root = None
    self.mms_root = None
    self.mysql_root = {}
    self.spcomp = None
    self.spcomp_bins = None
    self.smx_files = {}
    self.versionlib = None
    self.all_targets = []
    self.target_archs = set()
    self.libboost_root = None


    if builder.options.targets:
      target_archs = builder.options.targets.split(',')
    else:
      target_archs = ['x86']
      if builder.backend != 'amb2':
        target_archs.append('x86_64')

    for arch in target_archs:
        try:
            cxx = builder.DetectCxx(target_arch = arch)
            self.target_archs.add(cxx.target.arch)
        except Exception as e:
            # Error if archs were manually overridden.
            if builder.options.targets:
                raise
            print('Skipping target {}: {}'.format(arch, e))
            continue
        self.all_targets.append(cxx)

    if not self.all_targets:
        raise Exception('No suitable C/C++ compiler was found.')

  @property
  def tag(self):
    if builder.options.debug == '1':
      return 'Debug'
    return 'Release'

  def detectProductVersion(self):
    builder.AddConfigureFile('product.version')

    # For OS X dylib versioning
    import re
    with open(os.path.join(builder.sourcePath, 'product.version'), 'r') as fp:
      productContents = fp.read()
    m = re.match('(\d+)\.(\d+)\.(\d+).*', productContents)
    if m == None:
      self.productVersion = '1.0.0'
    else:
      major, minor, release = m.groups()
      self.productVersion = '{0}.{1}.{2}'.format(major, minor, release)

  def detectSDKs(self):
    if builder.options.sm_path:
      self.sm_root = builder.options.sm_path
    else:
      self.sm_root = ResolveEnvPath('SOURCEMOD18', 'sourcemod-1.10')
      if not self.sm_root:
        self.sm_root = ResolveEnvPath('SOURCEMOD', 'sourcemod-source')
      if not self.sm_root:
        self.sm_root = ResolveEnvPath('SOURCEMOD_DEV', 'sourcemod-central')
      if not self.sm_root:
        self.sm_root = ResolveEnvPath('SOURCEMOD', 'sourcemod')

    if not self.sm_root or not os.path.isdir(self.sm_root):
      raise Exception('Could not find a source copy of Sourcemod')
    self.sm_root = Normalize(self.sm_root)

    if builder.options.mms_path:
      self.mms_root = builder.options.mms_path
    else:
      self.mms_root = ResolveEnvPath('MMSOURCE110', 'mmsource-1.10')
      if not self.mms_root:
        self.mms_root = ResolveEnvPath('MMSOURCE_DEV', 'metamod-source')
      if not self.mms_root:
        self.mms_root = ResolveEnvPath('MMSOURCE_DEV', 'mmsource-central')
      if not self.mms_root:
        self.mms_root = ResolveEnvPath('MMSOURCE_DEV', 'metamod')

    if not self.mms_root or not os.path.isdir(self.mms_root):
      raise Exception('Could not find a source copy of Metamod:Source')
    self.mms_root = Normalize(self.mms_root)

    if builder.options.libboost_path:
      self.libboost_root = builder.options.libboost_path
    else:
      self.libboost_root = ResolveEnvPath('LIBBOOSTSOURCE144', 'libboost-1.44')
      if not self.libboost_root:
        self.libboost_root = ResolveEnvPath('LIBBOOSTSOURCE_DEV', 'libboost-source')
      if not self.libboost_root:
        self.libboost_root = ResolveEnvPath('LIBBOOSTSOURCE_DEV', 'libboost-central')
      if not self.libboost_root:
        self.libboost_root = ResolveEnvPath('LIBBOOSTSOURCE_DEV', 'libboost')

    if not self.libboost_root or not os.path.isdir(self.libboost_root):
      raise Exception('Could not find a source copy of libboost')
    self.libboost_root = Normalize(self.libboost_root)

  def configure(self):
    if not set(self.target_archs).issubset(['x86', 'x86_64']):
      raise Exception('Unknown target architecture: {0}'.format(self.target_archs))

    for cxx in self.all_targets:
        self.configure_cxx(cxx)

  def configure_cxx(self, cxx):
    if cxx.family == 'msvc':
      if cxx.version < 1900:
        raise Exception('Only MSVC 2015 and later are supported, c++14 support is required.')
    if cxx.family == 'gcc':
      if cxx.version < 'gcc-4.9':
        raise Exception('Only GCC versions 4.9 or greater are supported, c++14 support is required.')
    if cxx.family == 'clang':
      if cxx.version < 'clang-3.4':
        raise Exception('Only clang versions 3.4 or greater are supported, c++14 support is required.')

    if cxx.like('gcc'):
      self.configure_gcc(cxx)
    elif cxx.family == 'msvc':
      self.configure_msvc(cxx)

    # Optimizaiton
    if builder.options.opt == '1':
      cxx.defines += ['NDEBUG']

    # Debugging
    if builder.options.debug == '1':
      cxx.defines += ['DEBUG', '_DEBUG']

    # Platform-specifics
    if cxx.target.platform == 'linux':
      self.configure_linux(cxx)
    elif cxx.target.platform == 'mac':
      self.configure_mac(cxx)
    elif cxx.target.platform == 'windows':
      self.configure_windows(cxx)

    # Finish up.
    cxx.includes += [
      os.path.join(self.sm_root, 'public'),
    ]

  def configure_gcc(self, cxx):
    cxx.defines += [
      'stricmp=strcasecmp',
      '_stricmp=strcasecmp',
      '_snprintf=snprintf',
      '_vsnprintf=vsnprintf',
      'HAVE_STDINT_H',
      'GNUC',
    ]
    cxx.cflags += [
      '-pipe',
      '-fno-strict-aliasing',
      '-Wall',
      '-Werror',
      '-Wno-unused',
      '-Wno-switch',
      '-Wno-array-bounds',
      '-msse',
      '-fvisibility=hidden',
    ]

    if cxx.version == 'apple-clang-6.0' or cxx.version == 'clang-3.4':
      cxx.cxxflags += ['-std=c++1y']
    else:
      cxx.cxxflags += ['-std=c++14']

    cxx.cxxflags += [
      '-fno-threadsafe-statics',
      '-Wno-non-virtual-dtor',
      '-Wno-overloaded-virtual',
      '-fvisibility-inlines-hidden',
    ]

    have_gcc = cxx.family == 'gcc'
    have_clang = cxx.family == 'clang'
    if cxx.version >= 'clang-3.9' or cxx.version == 'clang-3.4' or cxx.version > 'apple-clang-6.0':
      cxx.cxxflags += ['-Wno-expansion-to-defined']
    if cxx.version == 'clang-3.9' or cxx.version == 'apple-clang-8.0':
      cxx.cflags += ['-Wno-varargs']
    if cxx.version >= 'clang-3.4' or cxx.version >= 'apple-clang-7.0':
      cxx.cxxflags += ['-Wno-inconsistent-missing-override']
    if cxx.version >= 'clang-2.9' or cxx.version >= 'apple-clang-3.0':
      cxx.cxxflags += ['-Wno-null-dereference']
    if have_clang or (cxx.version >= 'gcc-4.6'):
      cxx.cflags += ['-Wno-narrowing']
    if have_clang or (cxx.version >= 'gcc-4.7'):
      cxx.cxxflags += ['-Wno-delete-non-virtual-dtor']
    if cxx.version >= 'gcc-4.8':
      cxx.cflags += ['-Wno-unused-result']
    if cxx.version >= 'gcc-9.0':
      cxx.cxxflags += ['-Wno-class-memaccess', '-Wno-packed-not-aligned']
    if have_clang:
      cxx.cxxflags += ['-Wno-implicit-exception-spec-mismatch']
      if cxx.version >= 'apple-clang-5.1' or cxx.version >= 'clang-3.4':
        cxx.cxxflags += ['-Wno-deprecated-register']
      else:
        cxx.cxxflags += ['-Wno-deprecated']
      cxx.cflags += ['-Wno-sometimes-uninitialized']

    # Work around SDK warnings.
    if cxx.version >= 'clang-10.0':
        cxx.cflags += [
            '-Wno-implicit-int-float-conversion',
            '-Wno-tautological-overlap-compare',
        ]

    if have_gcc:
      cxx.cflags += ['-mfpmath=sse']
      cxx.cflags += ['-Wno-maybe-uninitialized']

    if builder.options.opt == '1':
      cxx.cflags += [
            '-O3',
            '-ftree-vectorize',
      ]
      if have_clang:
        cxx.cflags += [
          '-fexperimental-new-pass-manager',
          '-mllvm',
          '-inline-threshold=1000',
          '-mllvm',
          '-vectorize-loops',
        ]

    # Don't omit the frame pointer.
    cxx.cflags += ['-fno-omit-frame-pointer']

  def configure_msvc(self, cxx):
    if builder.options.debug == '1':
      cxx.cflags += ['/MTd']
      cxx.linkflags += ['/NODEFAULTLIB:libcmt']
    else:
      cxx.cflags += ['/MT']
    cxx.defines += [
      '_CRT_SECURE_NO_DEPRECATE',
      '_CRT_SECURE_NO_WARNINGS',
      '_CRT_NONSTDC_NO_DEPRECATE',
      '_ITERATOR_DEBUG_LEVEL=0',
    ]
    cxx.cflags += [
      '/W3',
    ]
    cxx.cxxflags += [
      '/EHsc',
      '/GR-',
      '/TP',
    ]
    cxx.linkflags += [
      'kernel32.lib',
      'user32.lib',
      'gdi32.lib',
      'winspool.lib',
      'comdlg32.lib',
      'advapi32.lib',
      'shell32.lib',
      'ole32.lib',
      'oleaut32.lib',
      'uuid.lib',
      'odbc32.lib',
      'odbccp32.lib',
    ]

    if builder.options.opt == '1':
      cxx.cflags += ['/Ox', '/Zo']
      cxx.linkflags += ['/OPT:ICF', '/OPT:REF']

    if builder.options.debug == '1':
      cxx.cflags += ['/Od', '/RTC1']

    # This needs to be after our optimization flags which could otherwise disable it.
    # Don't omit the frame pointer.
    cxx.cflags += ['/Oy-']

  def configure_linux(self, cxx):
    cxx.defines += ['_LINUX', 'POSIX', '_FILE_OFFSET_BITS=64']
    cxx.linkflags += ['-lm']
    if cxx.family == 'gcc':
      cxx.linkflags += ['-static-libgcc']
    elif cxx.family == 'clang':
      cxx.linkflags += ['-lgcc_eh']
    cxx.linkflags += [
      '-static-libstdc++',
      '-lpthread'
    ]

  def configure_mac(self, cxx):
    cxx.defines += ['OSX', '_OSX', 'POSIX', 'KE_ABSOLUTELY_NO_STL']
    cxx.cflags += ['-mmacosx-version-min=10.7']
    cxx.linkflags += [
      '-mmacosx-version-min=10.7',
      '-stdlib=libc++',
      '-lc++',
    ]
    cxx.cxxflags += ['-stdlib=libc++']

  def configure_windows(self, cxx):
    cxx.defines += ['WIN32', '_WINDOWS']

  def add_libamtl(self):
    # Add libamtl.
    self.libamtl = {}
    for cxx in self.all_targets:
      def get_configure_fn(cxx):
        return lambda builder, name: self.StaticLibrary(builder, cxx, name)
      extra_vars = {'Configure': get_configure_fn(cxx)}
      libamtl = builder.Build('public/amtl/amtl/AMBuilder', extra_vars)
      self.libamtl[cxx.target.arch] = libamtl.binary

  def AddVersioning(self, binary):
    if binary.compiler.target.platform == 'windows':
      binary.sources += ['version.rc']
      binary.compiler.rcdefines += [
        'BINARY_NAME="{0}"'.format(binary.outputFile),
        'RC_COMPILE',
      ]
    elif binary.compiler.target.platform == 'mac':
      if binary.type == 'library':
        binary.compiler.postlink += [
          '-compatibility_version', '1.0.0',
          '-current_version', self.productVersion
        ]
    return binary
    
  def LibraryBuilder(self, compiler, name):
    binary = compiler.Library(name)
    self.AddVersioning(binary)
    if binary.compiler.like('msvc'):
      binary.compiler.linkflags += ['/SUBSYSTEM:WINDOWS']
    return binary

  def ProgramBuilder(self, compiler, name):
    binary = compiler.Program(name)
    self.AddVersioning(binary)
    if '-static-libgcc' in binary.compiler.linkflags:
      binary.compiler.linkflags.remove('-static-libgcc')
    if '-lgcc_eh' in binary.compiler.linkflags:
      binary.compiler.linkflags.remove('-lgcc_eh')
    if binary.compiler.like('gcc'):
      binary.compiler.linkflags += ['-lstdc++', '-lpthread']
    if binary.compiler.like('msvc'):
      binary.compiler.linkflags += ['/SUBSYSTEM:CONSOLE']
    return binary

  def StaticLibraryBuilder(self, compiler, name):
    return compiler.StaticLibrary(name)

  def Library(self, context, compiler, name):
    compiler = compiler.clone()
    SetArchFlags(compiler)
    return self.LibraryBuilder(compiler, name)

  def Program(self, context, compiler, name):
    compiler = compiler.clone()
    SetArchFlags(compiler)
    return self.ProgramBuilder(compiler, name)
    
  def StaticLibrary(self, context, compiler, name):
    compiler = compiler.clone()
    SetArchFlags(compiler)
    return self.StaticLibraryBuilder(compiler, name)

  def ConfigureForExtension(self, context, compiler):
    compiler.cxxincludes += [
      os.path.join(context.currentSourcePath),
      os.path.join(context.currentSourcePath, 'sdk'),
      os.path.join(self.sm_root, 'public'),
      os.path.join(self.sm_root, 'public', 'extensions'),
      os.path.join(self.sm_root, 'sourcepawn', 'include'),
      os.path.join(self.sm_root, 'public', 'amtl', 'amtl'),
      os.path.join(self.sm_root, 'public', 'amtl'),
      os.path.join(self.libboost_root, 'build', 'include'),
    ]
    return compiler

  def ExtLibrary(self, context, compiler, name):
    binary = self.Library(context, compiler, name)
    SetArchFlags(compiler)
    self.ConfigureForExtension(context, binary.compiler)
    return binary

if getattr(builder, 'target', None) is not None:
    sys.stderr.write("Your output folder was configured for AMBuild 2.1, and SourceMod is now\n")
    sys.stderr.write("configured to use AMBuild 2.2. Please remove your output folder and\n")
    sys.stderr.write("reconfigure to continue.\n")
    os._exit(1)

SM = ExtensionConfig()
SM.detectSDKs()
SM.configure()

# This will clone the list and each cxx object as we recurse, preventing child
# scripts from messing up global state.
builder.targets = builder.CloneableList(SM.all_targets)

if builder.backend == 'amb2':
  BuildScripts = [
    'AMBuilder',
    'PackageScript',
  ]

builder.Build(BuildScripts, { 'SM': SM})
